vim-cpplint
==========
`vim-cpplint` is a Vim plugin that runs the currently open file through
cpplint.py, a static syntax and style checker for C++ source code.

The code will be checked according to [Google C++ Style Guide ](http://google-styleguide.googlecode.com/svn/trunk/cppguide.html)


Installation
------------
Use [vim-pathogen](https://github.com/tpope/vim-pathogen) if you're not using
it already. Then, simply put the contents of this repository in your
`~/.vim/bundle` directory.


Usage
-----
1. Open a C++ file
2. Press `<F7>` to run `cpplint.py` on it

It shows the errors inside a quickfix window, which will allow your to quickly
jump to the error locations by simply pressing [Enter].


Customization
-------------
If you don't want to use the `<F7>` key for cpplint-checking, simply remap it
to another key. It autodetects whether it has been remapped and won't register
the `<F7>` key if so. For example, to remap it to `<F3>` instead, use:

    autocmd FileType cpp map <buffer> <F3> :call Cpplint()<CR>


By default the plugin support following file extensions: 
*.cc, *.h, *.cpp, *.cu, *.cuh

You can change it by setting in .vimrc the variable: 

    let g:cpplint_extensions = "cpp,hpp,h,c,cc,cu,cuh"
    
The line length, by default it is 80 characters but you can change it by

    let g:cpplint_line_length = <line length>




Tips
----
A tip might be to run the cpplint.py check every time you write a C++ file, to
enable this, add the following line to your `.vimrc` file (thanks
[Godefroid](http://github.com/gotcha)!):

    autocmd BufWritePost *.h,*.cpp call Cpplint()

False positives can be ignored by putting 

    // NOLINT at the end of the line or 
    // NOLINTNEXTLINE in the previous line.
